# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master", "staging", "development" ]
  pull_request:
    branches: [ "master", "staging", "development" ]

permissions:
  contents: write


jobs:
  build:

    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  
  test:
    runs-on: ubuntu-24.04
    needs: build

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test with pytest
        run: |
          pytest

  sast-bandit:
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-24.04
    needs: [build, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      - name: Run Bandit
        run: |
          bandit -r todo_project -o bandit_security_report.json -f json --exit-zero
      - name: Security check report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Bandit security report
          path: bandit_security_report.json
          overwrite: true

  sast-dependency-check:
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-24.04
    needs: [build, test]
    steps:
      - uses: actions/checkout@v4
      - name: Install Java 11
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install OWASP Dependency Check
        run: |
          python -m pip install --upgrade pip
          pip install dependency-check
      - name: Run OWASP Dependency Check
        run: |
          dependency-check --disableAssembly -s . -o build --project "Task-Manager-using-Flask" \
          --exclude ".git/**" --exclude ".venv/**" --exclude "**/__pycache__/**" --exclude ".tox/**"
      - name: Upload OWASP Dependency Check report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Dependency Check report
          path: build/dependency-check-report.html  

  zap:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t task-manager-app .

      - name: Create Docker network
        run: docker network create zap-network

      - name: Start application container
        run: |
          docker run -d --name task-manager-app --network zap-network task-manager-app

      - name: Wait for application to be ready
        run: |
          for i in {1..30}; do
            if docker exec task-manager-app curl -s http://localhost:5000 > /dev/null; then              
              echo "Application is up!"
              break
            fi
            echo "Waiting for application..."
            sleep 5
          done

      - name: Run ZAP scan
        run: |
          mkdir -p zap-reports
          docker run --network zap-network -v $(pwd)/zap-reports:/zap/wrk/ owasp/zap2docker-stable \
            zap-baseline.py -t http://task-manager-app:5000 -r zap-report.html

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: ZAP Report
          path: zap-reports/zap-report.html

      - name: Stop and Remove Containers
        run: |
          docker stop task-manager-app
          docker rm task-manager-app
  
      - name: Remove Docker Network
        run: docker network rm zap-network

  autotag:
    runs-on: ubuntu-24.04
    needs: [build, test, sast-bandit, sast-dependency-check]
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4
    - name: Auto Tag
      uses: Jorricks/action-python-autotagging@1.0.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        path: todo_project/todo_project/__init__.py
        variable: tag_version
        prefix: v

